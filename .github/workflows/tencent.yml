# This workflow will build a docker container, publish and deploy it to Tencent Kubernetes Engine (TKE) when there is a push to the "main" branch.
#// CuratoAI Frontend (React + Vite) // /frontend/src/main.jsx import React from 'react'; import ReactDOM from 'react-dom/client'; import App from './App.jsx'; import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render( <React.StrictMode> <App /> </React.StrictMode> );

// /frontend/src/App.jsx import React, { useState } from 'react'; import axios from 'axios';

export default function App() { const [input, setInput] = useState({ dimensions: '', artType: '', budget: '', timeline: '', preferences: '' });

const [response, setResponse] = useState(null);

const handleSubmit = async (e) => { e.preventDefault(); const parsedInput = { dimensions: JSON.parse(input.dimensions), art_type: input.artType, budget: parseFloat(input.budget), timeline: input.timeline, preferences: input.preferences.split(',') }; const res = await axios.post('http://localhost:5000/api/user-input', parsedInput); const blueprint = await axios.post('http://localhost:5000/api/blueprint/generate', parsedInput); setResponse(blueprint.data); };

return ( <div style={{ padding: '2rem', fontFamily: 'sans-serif' }}> <h1>CuratoAI - Art Gallery Blueprint Generator</h1> <form onSubmit={handleSubmit}> <input placeholder='{"length":30,"width":20,"height":10}' value={input.dimensions} onChange={e => setInput({ ...input, dimensions: e.target.value })} /> <input placeholder='Art Type (e.g. contemporary)' value={input.artType} onChange={e => setInput({ ...input, artType: e.target.value })} /> <input placeholder='Budget' value={input.budget} onChange={e => setInput({ ...input, budget: e.target.value })} /> <input placeholder='Timeline (e.g. 2 months)' value={input.timeline} onChange={e => setInput({ ...input, timeline: e.target.value })} /> <input placeholder='Preferences (comma separated)' value={input.preferences} onChange={e => setInput({ ...input, preferences: e.target.value })} /> <button type='submit'>Generate Blueprint</button> </form> {response && ( <div style={{ marginTop: '2rem' }}> <h2>Blueprint Results</h2> <p><strong>Theme Summary:</strong> {response.theme_summary}</p> <p><strong>Artists:</strong> {response.curated_artists.join(', ')}</p> <a href={response.plan_url} target='_blank' rel='noreferrer'>View Floorplan</a> </div> )} </div> ); }

// /frontend/index.html

<!DOCTYPE html><html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CuratoAI</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>// /frontend/package.json (partial) { "name": "curatoai-ui", "version": "0.1.0", "scripts": { "dev": "vite", "build": "vite build", "preview": "vite preview" }, "dependencies": { "axios": "^1.6.2", "react": "^18.2.0", "react-dom": "^18.2.0" }, "devDependencies": { "vite": "^5.0.0" } }


# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Tencent Kubernetes Engine cluster,
#    including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace:
#    - TENCENT_CLOUD_SECRET_ID with Tencent Cloud secret id
#    - TENCENT_CLOUD_SECRET_KEY with Tencent Cloud secret key
#    - TENCENT_CLOUD_ACCOUNT_ID with Tencent Cloud account id
#    - TKE_REGISTRY_PASSWORD with TKE registry password
#
# 3. Change the values for the TKE_IMAGE_URL, TKE_REGION, TKE_CLUSTER_ID and DEPLOYMENT_NAME environment variables (below).

name: Tencent Kubernetes Engine

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow
env:
  TKE_IMAGE_URL: ccr.ccs.tencentyun.com/demo/mywebapp
  TKE_REGION: ap-guangzhou
  TKE_CLUSTER_ID: cls-mywebapp
  DEPLOYMENT_NAME: tke-test

permissions:
  contents: read

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    # Build
    - name: Build Docker image
      run: |
        docker build -t ${TKE_IMAGE_URL}:${GITHUB_SHA} .

    - name: Login TKE Registry
      run: |
        docker login -u ${{ secrets.TENCENT_CLOUD_ACCOUNT_ID }} -p '${{ secrets.TKE_REGISTRY_PASSWORD }}' ${TKE_IMAGE_URL}

    # Push the Docker image to TKE Registry
    - name: Publish
      run: |
        docker push ${TKE_IMAGE_URL}:${GITHUB_SHA}

    - name: Set up Kustomize
      run: |
        curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Set up ~/.kube/config for connecting TKE cluster
      uses: TencentCloud/tke-cluster-credential-action@v1
      with:
        secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
        secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
        tke_region: ${{ env.TKE_REGION }}
        cluster_id: ${{ env.TKE_CLUSTER_ID }}

    - name: Switch to TKE context
      run: |
        kubectl config use-context ${TKE_CLUSTER_ID}-context-default

    # Deploy the Docker image to the TKE cluster
    - name: Deploy
      run: |
        ./kustomize edit set image ${TKE_IMAGE_URL}:${GITHUB_SHA}
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/${DEPLOYMENT_NAME
        kubectl get services -o wide
                    - name: Cache
  uses: actions/cache@v4.2.3
  with:
    # A list of files, directories, and wildcard patterns to cache and restore
    path: 
    # An explicit key for restoring and saving the cache
    key: 
    # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
    restore-keys: # optional
    # The chunk size used to split up large files during upload, in bytes
    upload-chunk-size: # optional
    # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
    enableCrossOsArchive: # optional, default is false
    # Fail the workflow if cache entry is not found
    fail-on-cache-miss: # optional, default is false
    # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
    lookup-only: # optional, default is false
    # Run the post step to save the cache even if another step before fails
    save-always: # optional, default is false
                      - name: Cache
  uses: actions/cache@v4.2.3
  with:
    # A list of files, directories, and wildcard patterns to cache and restore
    path: 
    # An explicit key for restoring and saving the cache
    key: 
    # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
    restore-keys: # optional
    # The chunk size used to split up large files during upload, in bytes
    upload-chunk-size: # optional
    # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
    enableCrossOsArchive: # optional, default is false
    # Fail the workflow if cache entry is not found
    fail-on-cache-miss: # optional, default is false
    # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
    lookup-only: # optional, default is false
    # Run the post step to save the cache even if another step before fails
    save-always: # optional, default is false
          
